{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-fb10b190-57d2-4774-b490-672c4ad22221.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1676344239853,"exec_count":3,"id":"0c6b9c","input":"def attendance(string):\n    n = int(string[:-1])\n    if string == '100%':\n        return '\\nYou attended all classes. Thank you.'\n    elif n > 90:\n        return '\\nYou showed up to most classes, thank you.'\n    elif n > 70:\n        return '\\nYour attendence was OK, but I would hope you show up more often in the future.'\n    else:\n        return '\\nYou did not show up to class enough. Please do better.'\nimport numpy as np\n\ngenerals=['You truly achieved an extraordinary job',\n          'You\\'ve done a solid job this semester',\n          'You made acceptable progress overall',\n          'You have a lot much to work on, but you are on the right track',\n          'You are beginning to understand the fundamentals, but not much more']\n\ndef overall_grade(grades:list):\n    grade = round(np.mean(grades),2)\n    if grade >= 93:\n        return f'{generals[0]}, scoring a {grade}%.'\n    if grade >= 87:\n        return f'{generals[1]}, scoring a {grade}%.'\n    if grade >= 80:\n        return f'{generals[2]}, scoring a {grade}%.'\n    if grade >= 70:\n        return f'{generals[3]}, scoring a {grade}%.'\n    if grade >= 60:\n        return f'{generals[4]}, scoring a {grade}%.'\n    else:\n        return f'You failed, scoring a {grade}%'","kernel":"python3","pos":2,"start":1676344239848,"state":"done","type":"cell"}
{"cell_type":"code","end":1676348642593,"exec_count":86,"id":"8d74d2","input":"LOs = '''Identify/characterize/define a programming problem\nUnderstand and be able to use a variety of data types, control structures, and algorithmic problem-solving techniques in their programming\nDesign, document, implement and test solutions to programming problems\nExpress creativity using coding and technology in a variety of contexts\nIdentify and repair coding errors in a program\neffectively communicate programming solutions to others\nwork collaboratively to write modular code on larger projects'''.split('\\n')\nprint(LOs)","kernel":"python3","output":{"0":{"name":"stdout","text":"['Identify/characterize/define a programming problem', 'Understand and be able to use a variety of data types, control structures, and algorithmic problem-solving techniques in their programming', 'Design, document, implement and test solutions to programming problems', 'Express creativity using coding and technology in a variety of contexts', 'Identify and repair coding errors in a program', 'effectively communicate programming solutions to others', 'work collaboratively to write modular code on larger projects']\n"}},"pos":0,"start":1676348642584,"state":"done","type":"cell"}
{"cell_type":"code","end":1676348717334,"exec_count":87,"id":"d469e7","input":"def last_comma(string):\n    try:\n        comma_index = string.rindex(',')\n    except:\n        return string\n    string = list(string)\n    string[comma_index] = ' and'\n    string = ''.join(string)\n    return string\n#lo means learning outcomes\n#let lo a list consists of tuples. for example, [(1, 4), (2, 3), (3, 4), (4, 3)]\ndef lo_interpreter (lo:str):\n    lo = lo.split(', ')\n    lo = [(int(x[0]),int(x[-1])) for x in lo]\n    excel = []\n    good = []\n    okay = []\n    bad = []\n    for l in lo:\n        if l[1] == 4:\n            excel.append(l[0])\n        elif l[1] == 3:\n            good.append(l[0])\n        elif l[1] == 2:\n            okay.append(l[0])\n        else:\n            bad.append(l[0])\n    final = '\\n'\n    if excel != []:\n        final += (last_comma(f'You show sophisticated and comprehensive understanding to L.O. {str(excel)[1:-1]}.\\n'))\n    if good != []:\n        final += (last_comma(f'You have made good progress and you handle L.O. {str(good)[1:-1]}.\\n'))\n    if okay != []:\n        final += (last_comma(f'You have basically met the goal of L.O. {str(okay)[1:-1]} but there\\'s still space to improve!\\n'))\n    if bad != []:\n        final += (last_comma(f'You failed to prove your capablity of understanding L.O. {str(bad)[1:-1]}. I hope you can improve\\\n in the future!\\n'))\n    return final\nprint(lo_interpreter(\"1: 4, 2: 0, 3: 0, 4: 0\"))","kernel":"python3","output":{"0":{"name":"stdout","text":"\nYou show sophisticated and comprehensive understanding to L.O. 1.\nYou failed to prove your capablity of understanding L.O. 2, 3 and 4. I hope you can improve in the future!\n\n"}},"pos":3,"start":1676348717327,"state":"done","type":"cell"}
{"cell_type":"code","end":1676348858350,"exec_count":91,"id":"c52245","input":"def trend(scores:list):\n    from scipy.optimize import curve_fit\n    import matplotlib.pyplot as plt\n    from sklearn.metrics import r2_score\n    import numpy as np\n    times = np.arange(1,len(scores)+1,1)\n    scores = np.array(scores)\n    score=plt.plot(scores)\n    r2 = 0\n    c=0\n    b=True\n    while b:\n        c+=1\n        trend = np.polyfit(times, scores, c)\n        trend_e = np.poly1d(trend)\n        trendline = plt.plot(times, trend_e(times))\n        plt.close()\n        r2 = r2_score(trendline[0].get_data()[1], scores)\n        if r2>=0.6:\n            b = False\n\n    times_range = np.linspace(min(times),max(times),100)\n    fig, ax = plt.subplots(figsize=(12, 6))\n    plt.xlabel('Test')\n    plt.ylabel('Score%')\n    plt.ylim(-10,120)\n    trendline = ax.plot(times_range, trend_e(times_range),color=\"red\") # .savefig('my_plot.png')\n    score = ax.plot(times, scores)\n    \n    equation = [int(float(x.strip())) if float(x.strip()).is_integer() else float(x.strip()) for x in str([trend_e])[9:-3].split(',')]\n    degree = len(equation) -1\n    equation = [f'{num}*x**{degree-i}' for i,num in enumerate(equation)]\n    \n    return ' + '.join(equation).replace('**1','').replace('x**0','').replace('+ -','- ').strip('*'),fig\n\n\ndef derivative(expression):\n    import sympy\n    from sympy import Symbol\n    from sympy.parsing.sympy_parser import parse_expr\n\n    x = Symbol('x')\n    exp = parse_expr(expression)\n\n    return exp.diff()\n\n# derivative(trend([80,90,60,100,90,70]))\n\n\ndef improve_index(equa,scores):\n    import numpy as np\n    from sympy import Symbol\n    from sympy import lambdify\n    x = Symbol('x')\n    if type(equa) == sympy.core.numbers.Float:\n        equa += x*10**-100 # it needed an x\n    start= 1\n    end= len(scores)\n    n_range = np.arange(start,end,(end-start)/100)\n\n    f = lambdify(x, equa)\n    rates = f(n_range)\n    count = 0\n\n\n\n    for i in rates:\n        if i<=0:\n            count += 1\n    return (100-count)/100\n\ndef improvement_p(index):\n    final = ''\n    try:\n        assert index<=1\n        final += f\"In the semester, {round(index*100)}% of the time you were improving\"\n        if 1-index >0:\n            final += f\", and {round((1-index)*100)}% of the time you weren't.\"\n    except AssertionError:\n        pass\n    if final:\n        return final\n\ndef all_improve(lst, savepic = False):\n    if type(lst) == str: #                        from here\n        lst = lst[:-1].split('%, ')\n        lst = [int(x) for x in lst]\n    else:\n        if type(lst[0]) == str:\n            if '%' in list[0]:\n                lst = [int(x[:-1]) for x in lst]\n            else:\n                lst = [int(x) for x in lst] #     until here is just making sure the input is good\n    if all([x == lst[0] for x in lst]):\n        return 'You kept your scores perfectly consistant.'\n    if savepic:\n        trend(lst)[1].savefig(savepic + '/improvement_graph')\n    else:\n        return improvement_p(improve_index(derivative(trend(lst)[0]), lst))\nprint(all_improve([16*6,8*6,4*6,2*6,1*6,2*6,4*6,8*6,16*6]))\n# print(all_improve([1,2,4,8,16,32]))","kernel":"python3","output":{"0":{"name":"stdout","text":"In the semester, 50% of the time you were improving, and 50% of the time you weren't.\n"},"1":{"data":{"image/png":"18404cd446a9e0c55b07a6612ed4fcdb1bd397d7","text/plain":"<Figure size 864x432 with 1 Axes>"},"metadata":{"image/png":{"height":374,"width":723},"needs_background":"light"}}},"pos":4,"start":1676348857861,"state":"done","type":"cell"}
{"cell_type":"code","end":1676348867710,"exec_count":92,"id":"86ce5e","input":"import csv, os, numpy as np\n#from scipy.optimize import curve_fit\n#import matplotlib.pyplot as plt\n\n\nwith open('Comments.csv') as f:\n    HEADER = next(f)\n    arr = list(csv.reader(f))\n#     print(arr)\n#     outcome = {[int(i.strip()) for i in arr[3].split(':')][c]: [int(i.strip()) for i in arr[3].split(':')][c+1] for c, i in enumerate([int(i.strip()) for i in arr[3].split(':')])}\nstudent_info = {line[0]:line[1:] for line in arr}\ncolumns = np.array(arr).T\nnames = list(columns[0])\n\nfinal_comments = {name:f'{name.title()},\\nIn Computer Science, ' for name in names}\nfor key in final_comments.keys():\n    os.mkdir(key)\n    student_info[key][1] = [int(x) for x in student_info[key][1][:-1].split('%, ')]\n    final_comments[key] += overall_grade(student_info[key][1])\n    final_comments[key] += attendance(student_info[key][0])\n    final_comments[key] += lo_interpreter(student_info[key][2])\n    final_comments[key] += student_info[key][3]\n    final_comments[key] += '\\nIn your reflection, you said: \"' + student_info[key][4] + '\" Thank you for your contribution.'\n    final_comments[key] += all_improve(student_info[key][1])\n    all_improve(student_info[key][1],key)\n    with open(f'{key}/comment_text.txt', 'w') as f:\n        f.write(final_comments[key])\n# for key in final_comments:\n# print(final_comments[input('Name of student?').strip().title()])","kernel":"python3","metadata":{"cocalc":{"outputs":{"0":{"name":"input","opts":{"password":false,"prompt":"Name of student?"},"output_type":"stream","value":"gigi"}}}},"output":{"0":{"data":{"image/png":"4605d8e0ac0d5fa42978f8500dfc599297a41cd4","text/plain":"<Figure size 864x432 with 1 Axes>"},"metadata":{"image/png":{"height":374,"width":723},"needs_background":"light"}}},"pos":1,"scrolled":true,"start":1676348865339,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"94e8ca","input":"","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"b94019","input":"# def all_improve(lst):\n#     if type(lst) == str:\n#         lst = lst[:-1].split('%, ')\n#         lst = [int(x) for x in lst]\n#     return improve_index(derivative(trend(lst)), lst)\n# print(all_improve('35%, 100%, 100%, 100%, 100%, 35%'))","output":{"0":{"name":"stdout","output_type":"stream","text":"0.0\n"},"1":{"data":{"image/png":"363c3dc5889ade27cef9f0d2d0226aeb26354519","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":45,"metadata":{"image/png":{"height":411,"width":710},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"5310aa","input":"# :( no use so sad\ndef sum_differences(lst):\n    return sum([lst[i]-lst[i-1] for i in range(1,len(lst))])\n\ndef improvement(grades:list):\n    grades = [int(x[:-1]) for x in grades]\n    minmax = {}\n    for i, start in enumerate(grades):\n        for j, grade in enumerate(grades[i+1:]):\n            minmax[grade-start] = (i+1,j+i+2)\n    (mn,mx) = minmax[max(minmax.keys())]\n    if max(minmax.keys()) > 15:\n        return f'From your {ith(mn)} test to your {ith(mx)} test, you improved significantly. Nice job!'\n    elif sum_differences(grades) < -20:\n        return 'You showed a downward trend throughout this semester. Hope you can improve in the future!'\n    elif max(grades) - grades[mx-1] > 15:\n        print(f\"Great job on your {ith(1+grades.index(max(grades)))} test!\")\n    else:\n        print('You have stayed consistant with your test scores throughout this semester.', end = '')\n        if min(grades) > 82:\n            print(' Nice job!')\n        elif min(grades) > 70:\n            print()\n        else:\n            print(' I hope to see improvement.')\nprint(improvement(['60%','100%','80%']))\n\ndef last_comma(string):\n    try:\n        comma_index = string.rindex(',')\n    except:\n        return string\n    string = list(string)\n    string[comma_index] = ' and'\n    string = ''.join(string)\n    return string\n","output":{"0":{"name":"stdout","output_type":"stream","text":"From your first test to your second test, you improved significantly. Nice job!\n"}},"pos":6,"type":"cell"}
{"end":1676346904683,"exec_count":32,"id":"f6b040","input":"import sympy\n(sympy.core.numbers.Integer(10))","kernel":"python3","output":{"0":{"data":{"text/latex":"$\\displaystyle 10$","text/plain":"10"},"exec_count":32}},"pos":4.5,"start":1676346904679,"state":"done","type":"cell"}
{"end":1676348843585,"exec_count":90,"id":"39a271","input":"# DANGEROUS CODE\nimport shutil\nfor key in final_comments.keys():\n    try:\n        shutil.rmtree(key)\n    except:\n        print(f\"{key} deleted.\")","kernel":"python3","pos":0.5,"start":1676348843578,"state":"done","type":"cell"}
{"id":0,"time":1676344066228,"type":"user"}
{"last_load":1676344066203,"type":"file"}